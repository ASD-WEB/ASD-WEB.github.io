(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{218:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("h2",{attrs:{id:"远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),s("ol",[s("li",[t._v("本地创建了一个 Git 仓库后，又想在 GitHub 创建一个 Git 仓库，并且让这两个仓库进行远程同步，这样，GitHub 上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。目前，")]),t._v(" "),s("li",[t._v("在 GitHub 上的这个 learngit 仓库还是空的，GitHub 告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到 GitHub 仓库。现在，我们根据 GitHub 的提示，在本地的 learngit 仓库下运行命令："),s("br"),t._v(" "),s("code",[t._v("git remote add origin git@github.com:michaelliao/learngit.git")]),t._v(" "),s("br"),t._v("添加后，远程库的名字就是 origin，这是 Git 默认的叫法，也可以改成别的，但是 origin 这个名字一看就知道是远程库。")]),t._v(" "),s("li",[t._v("下一步，就可以把本地库的所有内容推送到远程库上："),s("br"),t._v(" "),s("code",[t._v("$ git push -u origin master")]),t._v("把本地库的内容推送到远程，用 git push 命令，实际上是把当前分支 master 推送到远程。由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。"),s("br"),t._v("\n从现在起，只要本地作了提交，就可以通过命令：\n"),s("code",[t._v("git push origin master")]),s("br"),t._v("把本地 master 分支的最新修改推送至 GitHub，现在，你就拥有了真正的分布式版本库！")]),t._v(" "),s("li",[t._v("SSH 警告\n当你第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\nRSA key fingerprint is xx.xx.xx.xx.xx.\nAre you sure you want to continue connecting (yes/no)\n")])])]),s("p",[t._v("这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 yes 回车即可。")]),t._v(" "),s("p",[t._v("Git 会输出一个警告，告诉你已经把 GitHub 的 Key 添加到本机的一个信任列表里了：")]),t._v(" "),s("p",[s("code",[t._v("Warning: Permanently added 'github.com' (RSA) to the list of known hosts.")]),t._v("\n这个警告只会出现一次，后面的操作就不会有任何警告了。\n如果你实在担心有人冒充 GitHub 服务器，输入 yes 前可以对照 GitHub 的 RSA Key 的指纹信息是否与 SSH 连接给出的一致。")]),t._v(" "),s("p",[s("strong",{staticStyle:{color:"red"}},[t._v("小结")]),t._v(" "),s("br"),t._v("\n要关联一个远程库，使用命令："),s("br"),t._v(" "),s("code",[t._v("git remote add origin git@server-name:path/repo-name.git")]),t._v("；"),s("br"),t._v("\n关联后，使用命令："),s("br"),t._v(" "),s("code",[t._v("git push -u origin master 第一次推送master分支的所有内容")]),t._v("；"),s("br"),t._v("\n此后，每次本地提交后，只要有必要，就可以使用命令："),s("br"),t._v(" "),s("code",[t._v("git push origin master 推送最新修改")]),t._v(" "),s("br"),s("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440"),s("OutboundLink")],1),t._v("（参照廖雪峰老师）")]),t._v(" "),s("h2",{attrs:{id:"创建与合并分支命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支命令"}},[t._v("#")]),t._v(" 创建与合并分支命令")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("查看分支："),s("code",[t._v("git branch")])])]),t._v(" "),s("li",[s("p",[t._v("创建分支："),s("code",[t._v("git branch <name>")])])]),t._v(" "),s("li",[s("p",[t._v("切换分支："),s("code",[t._v("git checkout <name>或者git switch <name>")])])]),t._v(" "),s("li",[s("p",[t._v("创建 + 切换分支："),s("code",[t._v("git checkout -b <name>或者git switch -c <name>")])])]),t._v(" "),s("li",[s("p",[t._v("合并某分支到当前分支："),s("code",[t._v("git merge <name>")])])]),t._v(" "),s("li",[s("p",[t._v("删除分支："),s("code",[t._v("git branch -d <name>")])])])]),t._v(" "),s("h2",{attrs:{id:"git-sshkey"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-sshkey"}},[t._v("#")]),t._v(" git sshkey")]),t._v(" "),s("ol",[s("li",[t._v('生成新的 sshkey\nssh-keygen -t rsa -b 4096 -C "55343581@qq.com"')]),t._v(" "),s("li",[t._v("如果不使用密码连输按 3 次回车")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Enter a file "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" which to save the "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("key")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Users"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("you"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Press enter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输入密码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Enter "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("passphrase")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" no passphrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Type a passphrase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重复密码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Enter same passphrase again"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Type passphrase again"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"上传项目的代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上传项目的代码"}},[t._v("#")]),t._v(" 上传项目的代码")]),t._v(" "),s("ol",[s("li",[t._v("在命令行上创建新存储库")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('echo "# newVue" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin git@github.com:ASD-WEB/newVue.git\ngit push -u origin master\n\n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("从命令行推导出现有的存储库")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git remote add origin git@github.com:ASD-WEB/newVue.git\ngit push -u origin master\n\n")])])]),s("h2",{attrs:{id:"github-actions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-actions"}},[t._v("#")]),t._v(" GitHub Actions")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/features/actions"}},[t._v("GitHub Actions")]),t._v(" 是 GitHub 的持续集成服务，于2018年10月推出。")]),t._v(" "),s("ol",[s("li",[t._v("GitHub Actions 是什么"),s("br"),t._v("\n大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。")]),t._v(" "),s("li",[t._v("GitHub 做了一个"),s("a",{attrs:{href:"https://github.com/marketplace?type=actions"}},[t._v("官方市场")]),t._v("，可以搜索到他人提交的 actions。另外，还有一个"),s("a",{attrs:{href:"https://github.com/sdras/awesome-actions"}},[t._v(" awesome actions")]),t._v(" 的仓库，也可以找到不少 action。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);